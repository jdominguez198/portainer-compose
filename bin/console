#!/usr/bin/env bash
set -euo pipefail

resolve_absolute_dir()
{
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$( cd -P "$( dirname ${SOURCE} )" && pwd )"
      SOURCE="$(readlink ${SOURCE})"
      [[ ${SOURCE} != /* ]] && SOURCE="${DIR}/${SOURCE}" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    ABSOLUTE_BIN_PATH="$( cd -P "$( dirname ${SOURCE} )" && pwd )"
    ABSOLUTE_PATH="${ABSOLUTE_BIN_PATH}/.."
}

init_dirs()
{
    resolve_absolute_dir
    export ROOT_DIR="${ABSOLUTE_PATH}/"
    export COMMANDS_DIR="${ABSOLUTE_PATH}/console"
}

usage()
{
    printf "Available commands:\n"
	COMMANDS_OUTPUT=""
	for script in "${COMMANDS_DIR}"/*
	do
	    COMMAND_BASENAME=$(basename ${script})
	    COMMAND_NAME=${COMMAND_BASENAME%.sh}
	    COMMAND_DESC_PROPERTY="command_desc_${COMMAND_NAME//-/_}"
	    COMMAND_DESC="${!COMMAND_DESC_PROPERTY:-}"
	    COMMAND_OUTPUT=$(printf "  %-30s %s" "${COMMAND_NAME}" "${COMMAND_DESC}")
	    COMMANDS_OUTPUT="${COMMANDS_OUTPUT}${COMMAND_OUTPUT}\n"
	done
    printf "${COMMANDS_OUTPUT}"
}

init_dirs

if [ "$#" == 0 ] || [ "$1" == "--help" ]; then
  usage
  exit 0
fi

export DOCKER_COMPOSE="docker-compose -f ${ROOT_DIR}docker-compose.yml -p portainer"

COMMAND_NAME="$1.sh"
if [ ! -f ${COMMANDS_DIR}/${COMMAND_NAME} ]; then
    printf "Command not found\n"
    printf " Execute portainer --help to see commands available\n"
    exit 1
fi

shift
${COMMANDS_DIR}/${COMMAND_NAME} "$@"

